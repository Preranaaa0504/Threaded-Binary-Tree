#include<iostream>
using namespace std;

class tbtnode {
    char data;
    bool rbit,lbit;
    tbtnode *right;
    tbtnode *left;
    friend class tbt;
public:
    tbtnode();
};

tbtnode::tbtnode() {
    lbit=1;
    rbit=1;
    right = nullptr;
    left = nullptr;
}

class tbt {
    tbtnode *head;
public:
    void create();
    void inorder();
    void preorder();
    tbtnode * insuccr(tbtnode *temp);
    tbt();
};

tbt::tbt() {
    head = new tbtnode;
    head->data=-1;
    head->right=head;
    head->rbit = 0;
    head->left = head;
}

void tbt:: create() {
    tbtnode *temp, *root, *curr;
    char ch,ch1;
    root = new tbtnode;
    cout<<"Please enter the data for root :- ";
    cin>>root->data;
    head->left=root;
    head->lbit=0;
    root->left=head;
    root->right=head;

    do {
        int flag=0;
        temp=root;
        curr=new tbtnode;
        cout<<"Please enter the data you want to add :- ";
        cin>>curr->data;
        while(flag==0) {
            cout<<"Press l to add to the left or r to add to the right of "<<temp->data<<" :- ";
            cin>>ch;
            if(ch=='l') {
                if(temp->lbit==1) {
                    curr->right=temp;
                    curr->left=temp->left;
                    temp->left=curr;
                    temp->lbit=0;
                    flag=1;
                } else
                    temp=temp->left;
            }
            if(ch=='r') {
                if(temp->rbit==1) {
                    curr->left=temp;
                    curr->right=temp->right;
                    temp->right=curr;
                    temp->rbit=0;
                    flag=1;
                } else
                    temp=temp->right;
            }
        }
        cout<<"Please press y if you want to add more nodes :- ";
        cin>>ch1;
    } while(ch1=='y');
}

void tbt::inorder() {
    cout<<"Inorder Traversal of the tree is "<<endl;
    tbtnode *temp;
    temp=head;
    while(1) {
        temp=insuccr(temp);
        if(temp==head) {
            break;
        }
        cout<<temp->data<<"\t";
    }
}

tbtnode* tbt::insuccr(tbtnode *temp) {
    tbtnode *x;
    x=temp->right;
    if(temp->rbit==0) {
        while(x->lbit==0) {
            x=x->left;
        }
    }
    return x;
}

void tbt::preorder() {
    cout<<"Preorder traversal of threaded binary tree is: "<<endl;
    tbtnode *temp=head->left;
    while (temp != head) {
        cout << temp->data <<"\t";
        while (temp->lbit != 1) {
            temp = temp->left;
            cout << temp->data << "\t";
        }
        while (temp->rbit == 1) {
            temp = temp->right;
        }
        temp = temp->right;
    }
}

int main() {
    int ch;
    tbt t1;
    t1.create();
    while(1) {
        cout<<"\nPress 1 for Inorder traversal\nPress 2 for Preorder traversal\nPress 3 to exit"<<endl;
        cin>>ch;
        if(ch==3) {
            cout<<"Thank you for using \n";
            break;
        } else {
            switch(ch) {
            case 1:
                t1.inorder();
                break;
            case 2:
                t1.preorder();
                break;
            default:
                cout<<"Wrong choice ";
                break;
            }
        }
    }
}
